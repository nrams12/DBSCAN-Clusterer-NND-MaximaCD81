%% Neal Ramseier 11.27.24 
%NND calculation was borrowed from a peice of code written by Jesse Anderson. 
%This code uses overlap from a code written for the publication with the following DOI: 10.1016/j.bpj.2024.03.029
%This code inputs the X and Y coordinates from ThunderSTORM reconstruction and clusters the data using DBSCAN, then 
%calculates the  nearest neighbor distance, maximum diameter, and area of the clusters. The values are then exported 
% in .csv file format. 
%% Close all and Import Data 
clear variables; close all; clc; close all hidden;
disp("Previous Data Cleared"); 
if not(isfolder('MATLABData'))
    mkdir('MATLABData')
end
folder = string(pwd)+'\MATLABData\';
[fname,directory] = uigetfile('*.csv','Please choose a .csv file'); %the user selects a file
tic;
fileName = fullfile(directory, fname); %takes directory/filename.txt and stores to fullname var
Data = readmatrix(fileName);%reads in file to Data var
RawXData = Data(:,3); %separate X data
RawYData = Data(:,4); %separate Y data
RawXYData = [RawXData,RawYData]; 
Xmin = min(RawXData); Xmax = max(RawXData); Ymin = min(RawYData); Ymax = max(RawYData); 
figure(); %create figure of unclustered data
scatter(RawXData, RawYData,6,'filled'); 
axis equal; xlim([Xmin-1000 Xmax+1000]); ylim([Ymin-1000 Ymax+1000]); 
disp("Data Loaded");
%% Cluser using DBSCAN
%This section of code clusters the data using DBSCAN. The clustered data is then denoised, then organized into a struct for grouping. 

%Change these two values below to tweak the clustering of the data.
minPTS = 7; %Set to the minimum nuber of points you want in a single cluster
Epsilon = 10; %Set the search radius to find those minimum number of points

Clusters = struct; clusterLabel = [];
disp("Begin Clustering");
ClusterID = dbscan(RawXYData,Epsilon,minPTS); %perform the DBSCAN clustering of the X and Y data
StructData=[RawXData,RawYData,ClusterID]; %set up for removing noise points
[ClusterID2,val]=find(StructData==-1); %find noise points  
StructData(ClusterID2,:)=[]; % remove noise points
X = StructData(:,1); Y = StructData(:,2); ID = StructData(:,3); q=1;
for n = 1:max(ClusterID)
    temp = ID(StructData(:,3)==n);
    for iii =  1:length(temp)
        clusterLabel(iii,1) = q;
    end
    holdData = horzcat(X(StructData(:,3)==n), Y(StructData(:,3)==n),clusterLabel); %find clusters of 1:X and sort into XY
    j=strcat('Cluster ',num2str(q)); 
    q = q+1; 
    Clusters.(j) = holdData;
    clear clusterLabel
end
figure() 
pl = gscatter(X,Y,ID);
TheLegend = legend({' '}); 
set(TheLegend,'visible','off'); 
xlabel("X"); ylabel("Y"); title("Clusters");
axis equal; xlim([Xmin-1000 Xmax+1000]); ylim([Ymin-1000 Ymax+1000]); 
%% Attribute Calculation of Clusters
%This section of code calculates the max diameter of each cluster. 
disp("Calculating");
%Area
nameCluster = 'Cluster'; holdArea = []; holdCluster = []; numberOfClusters = q-1; holdCentroids =[]; holdIDX = []; holdNND = []; MDHold = []; CenterStr = 'Centers'; NNDStr = 'NearestNeighborDistance'; NNLocStr = 'NearestNeighborLoc';
for i =1:numberOfClusters 
    holdTheCluster = Clusters.(['Cluster',num2str(i)]);
    X = holdTheCluster(:,1);
    Y = holdTheCluster(:,2);
    C = holdTheCluster(:,3);
    if length(X) < 4 %leave out clusters with less than 4 points
        continue
    end
    K = boundary(X,Y); %compute boundary
    area = polyarea(X(K),Y(K)); %Area of the boundary previously calculated.
    holdArea = [holdArea;area]; %add to matrix keeping track of area
    holdCluster = [holdCluster;i];%add to matrix keeping track of cluster number
    f =strcat(nameCluster,num2str(i),'Area'); 
    Clusters.(f) = area; 

    %Maximum Diameter of Cluster
    xydistances = pdist2([X,Y],[X,Y]);
    maxDiameter = max(xydistances(:));
    MDHold = [MDHold;maxDiameter];
    f =strcat(nameCluster,num2str(i),'MaxDiameter'); 
    Clusters.(f) = maxDiameter; 
%Credits to Jesse Anderson to the end of this section
    CenterClusterMe =[sum(X)/length(X),sum(Y)/length(Y)];
    %find the center by taking the sum of every X value and
    %dividing it by the number of X Values, same for Y and matches
    Centroids = CenterClusterMe;
    Centroids(1,3) = C(3);
    holdCentroids=[holdCentroids;Centroids]; %centroid calculated
    jjn =strcat(nameCluster,num2str(i),CenterStr);
    Clusters.(jjn) = CenterClusterMe;
    IDX = [num2str(i)];
    holdIDX{i,i} = IDX;
end
%% Nearest Neighbor Calculation
% A reachability matrix is generated using the centroids of each cluster as
% the basis for comparison. This reachability matrix will be used to
% determine the closest centroid location, its cluster label integer, and
% the distance between the points. Credits to Jesse Anderson. 
holdIDX = reshape(holdIDX,[],1);
holdIDX(cellfun(@isempty,holdIDX)) =[];
for i = 2:length(holdCentroids)
    holdIDX(:,i) = holdIDX(:,1);
end

for i = 1:length(holdCentroids)
    XC = holdCentroids(i,1);
    YC = holdCentroids(i,2);
        for ii = 1:length(holdCentroids)
            distance(ii,i) = sqrt( ( (holdCentroids(ii,1)-XC)^2 ) + ( (holdCentroids(ii,2)-YC)^2 ) );
            if distance(ii,i)==0 
                distance(ii,i) = NaN; 
            end
        end
end
for i = 1:length(holdCentroids)
        holdDistance = distance(:,i); 
        [findMin,idx] = min(holdDistance,[],1,'omitnan');
        NearestNeighbor(i,1) = holdIDX(idx,1);
        subcluster = string(holdIDX(i,1));
        NearestNeighbor(i,2) = num2cell(findMin);
        jjjn =strcat(nameCluster,subcluster,NNDStr); 
        Clusters.(jjjn) = findMin;
        holdNND = [holdNND;findMin];
        ijkn = strcat(nameCluster,subcluster,NNLocStr); 
        Clusters.(ijkn) = string(holdIDX(idx,1));
end
%% Import csv and write into it
disp('Prepare for Export');disp(' '); 
exportSortedData = [holdCluster,MDHold]; %Create Matrix of the sorted data to prep for export
writematrix(exportSortedData,folder+"MVClustersTotalMD.csv",'WriteMode','append'); %add to file
exportSortedData = [holdCluster,holdArea]; %Create Matrix of the sorted data to prep for export
writematrix(exportSortedData,folder+"MVClustersTotalArea.csv",'WriteMode','append'); %add to file
exportSortedData = [holdCluster,holdNND]; %Create Matrix of the sorted data to prep for export
writematrix(exportSortedData,folder+"MVClustersTotalNND.csv",'WriteMode','append'); %add to file
disp('All Done.');
toc; %Time
